{"version":3,"file":"static/js/275.be2c705a.chunk.js","mappings":"4TACAA,IAAAA,SAAAA,QAAyB,8BACzBA,IAAAA,SAAAA,QAAAA,KAAAA,gBAA8C,kCAE9C,IAAMC,EAAM,mCAuBNC,EAAQ,mCAAG,oGACQF,IAAAA,IAAA,uCAA0CC,IADlD,cACTE,EADS,yBAGRA,EAASC,MAHD,2CAAH,qDAMRC,EAAY,mCAAG,WAAMC,GAAN,uFACIN,IAAAA,IAAA,kBACVM,EADU,oBACIL,EADJ,oBADJ,cACbE,EADa,yBAIZA,EAASC,MAJG,2CAAH,sDAOZG,EAAe,mCAAG,WAAMD,GAAN,uFACCN,IAAAA,IAAA,kBACVM,EADU,4BACYL,EADZ,2BADD,cAChBE,EADgB,yBAIfA,EAASC,MAJM,2CAAH,sDAOfI,EAAgB,mCAAG,WAAMC,GAAN,uFACAT,IAAAA,IAAA,kCACMC,EADN,qDACsDQ,IAFtD,cACjBN,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOhBM,EAAa,mCAAG,WAAMJ,GAAN,uFACGN,IAAAA,IAAA,mBAAsBM,EAAtB,4BAA4CL,IAD/C,cACdE,EADc,yBAEbA,EAASC,MAFI,2CAAH,uD,6JCrDnB,EAAwB,oBAAxB,EAAuD,uBAAvD,EAAyF,uB,SC4DzF,EAtDa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACED,GAAW,GADb,mBAGiCP,EAAAA,EAAAA,IAAcC,GAH/C,OAGUQ,EAHV,OAIIJ,EAAQI,GAJZ,gDAMIC,QAAQC,IAAR,MANJ,yBAQIJ,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdK,KACC,CAACX,IAEJS,QAAQC,IAAIP,IAGV,gBAAIS,UAAWC,EAAf,UACGR,IACC,SAAC,KAAD,CACES,MAAM,MACNC,iBAAiB,OACjBC,kBAAkB,MAClBC,iBAAiB,SAGpBd,GACCA,EAAKA,KAAKe,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,cAAeC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,aAAc1B,EAAS,EAATA,GACvD,OACE,gBAAaiB,UAAWC,EAAxB,WACE,gBACED,UAAWC,EACXS,IACED,EAAY,yCAC0BA,GAClCE,EAENC,IAAKL,KAEP,kCAAUA,MACV,uCAAeC,OAXRzB,W","sources":["API/API.js","webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\naxios.defaults.headers.post['Content-Type'] = 'application/json; charset=utf-8';\n\nconst KEY = '96dea35b5a4d6ccb61b77721fd102ef9';\n// const GetGenres = async () => {\n//   const response = await axios.get(\n//     `3/genre/movie/list?api_key=${KEY}&language=en-US`\n//   );\n//   return response.data;\n// };\n\n// export function GetFilms() {\n//   return axios\n//     .get(`3/trending/all/day?api_key=${KEY}`)\n//     .then(response => response.data);\n//   // console.log(response.data);\n// }\n\n// const GetFilms = async id => {\n//   const response = await axios.get(\n//     `3/movie/${id}?api_key=${KEY}&language=en-US`\n//   );\n\n//   return response.data;\n// };\n\nconst GetFilms = async () => {\n  const response = await axios.get(`3/trending/movie/day?api_key=${KEY}`);\n\n  return response.data;\n};\n\nconst getMovieById = async id => {\n  const response = await axios.get(\n    `3/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst getMovieReviews = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nconst getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `/3/search/movie?api_key=${KEY}&language=en-US&include_adult=false&query=${query}`\n  );\n  return response.data;\n};\n\nconst getMoviesCast = async id => {\n  const response = await axios.get(`/3/movie/${id}/credits?api_key=${KEY}`);\n  return response.data;\n};\n\nexport {\n  GetFilms,\n  getMovieById,\n  getMoviesByQuery,\n  getMovieReviews,\n  getMoviesCast,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"photo\":\"Cast_photo__lvFLf\",\"castList\":\"Cast_castList__ARoWn\",\"castItem\":\"Cast_castItem__-Jcfe\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMoviesCast } from 'API';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport placeHolder from '../../data/no-image.jpg';\nimport s from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchFilm() {\n      setLoading(true);\n      try {\n        const getFilmReviews = await getMoviesCast(movieId);\n        setCast(getFilmReviews);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchFilm();\n  }, [movieId]);\n\n  console.log(cast);\n\n  return (\n    <ul className={s.castList}>\n      {loading && (\n        <ThreeCircles\n          color=\"red\"\n          outerCircleColor=\"blue\"\n          middleCircleColor=\"red\"\n          innerCircleColor=\"grey\"\n        />\n      )}\n      {cast &&\n        cast.cast.map(({ original_name, character, profile_path, id }) => {\n          return (\n            <li key={id} className={s.castItem}>\n              <img\n                className={s.photo}\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : placeHolder\n                }\n                alt={original_name}\n              />\n              <p>Name: {original_name}</p>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","KEY","GetFilms","response","data","getMovieById","id","getMovieReviews","getMoviesByQuery","query","getMoviesCast","movieId","useParams","useState","cast","setCast","loading","setLoading","useEffect","getFilmReviews","console","log","fetchFilm","className","s","color","outerCircleColor","middleCircleColor","innerCircleColor","map","original_name","character","profile_path","src","placeHolder","alt"],"sourceRoot":""}